import java.util.List;
import java.util.Optional;
import java.util.Scanner;

/**
 * The main class for the Student Management System.
 * This class provides a command-line interface (CLI) for the user to interact with.
 */
public class Main {
    private static final StudentDAO studentDAO = new StudentDAO();
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            printMenu();
            int choice = getUserChoice();

            try {
                switch (choice) {
                    case 1:
                        addStudent();
                        break;
                    case 2:
                        viewAllStudents();
                        break;
                    case 3:
                        updateStudent();
                        break;
                    case 4:
                        deleteStudent();
                        break;
                    case 5:
                        System.out.println("Exiting application. Goodbye!");
                        return;
                    default:
                        System.out.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (Exception e) {
                System.out.println("An error occurred: " + e.getMessage());
            }
            System.out.println("\nPress Enter to continue...");
            scanner.nextLine(); // Consume the rest of the line
        }
    }

    /**
     * Prints the main menu of options to the console.
     */
    private static void printMenu() {
        System.out.println("\n--- Student Management System ---");
        System.out.println("1. Add a new Student");
        System.out.println("2. View all Students");
        System.out.println("3. Update a Student's record");
        System.out.println("4. Delete a Student");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Reads and validates the user's menu choice.
     *
     * @return The integer value of the user's choice.
     */
    private static int getUserChoice() {
        while (!scanner.hasNextInt()) {
            System.out.print("Invalid input. Please enter a number: ");
            scanner.next(); // discard non-integer input
        }
        int choice = scanner.nextInt();
        scanner.nextLine(); // consume newline left-over
        return choice;
    }

    /**
     * Handles the logic for adding a new student.
     */
    private static void addStudent() {
        System.out.println("\n--- Add New Student ---");
        System.out.print("Enter Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Grade (e.g., 10th, B.Sc. CS): ");
        String grade = scanner.nextLine();
        System.out.print("Enter Email: ");
        String email = scanner.nextLine();

        // ID is auto-generated by DAO
        Student student = new Student(0, name, grade, email);
        studentDAO.addStudent(student);
        System.out.println("Student added successfully!");
    }

    /**
     * Handles the logic for displaying all students.
     */
    private static void viewAllStudents() {
        System.out.println("\n--- All Student Records ---");
        List<Student> students = studentDAO.getAllStudents();
        if (students.isEmpty()) {
            System.out.println("No student records found.");
        } else {
            students.forEach(System.out::println);
        }
    }

    /**
     * Handles the logic for updating an existing student's record.
     */
    private static void updateStudent() {
        System.out.println("\n--- Update Student Record ---");
        System.out.print("Enter the ID of the student to update: ");
        int id = getUserChoice();

        Optional<Student> studentOptional = studentDAO.getStudentById(id);
        if (studentOptional.isEmpty()) {
            System.out.println("Student with ID " + id + " not found.");
            return;
        }

        System.out.println("Enter new details (leave blank to keep current value):");
        Student currentStudent = studentOptional.get();

        System.out.print("Enter new Name [" + currentStudent.getName() + "]: ");
        String name = scanner.nextLine();
        if (name.isEmpty()) {
            name = currentStudent.getName();
        }

        System.out.print("Enter new Grade [" + currentStudent.getGrade() + "]: ");
        String grade = scanner.nextLine();
        if (grade.isEmpty()) {
            grade = currentStudent.getGrade();
        }

        System.out.print("Enter new Email [" + currentStudent.getEmail() + "]: ");
        String email = scanner.nextLine();
        if (email.isEmpty()) {
            email = currentStudent.getEmail();
        }

        Student updatedStudent = new Student(id, name, grade, email);
        if (studentDAO.updateStudent(updatedStudent)) {
            System.out.println("Student record updated successfully!");
        } else {
            // This case should ideally not be reached due to the check above
            System.out.println("Failed to update student record.");
        }
    }

    /**
     * Handles the logic for deleting a student.
     */
    private static void deleteStudent() {
        System.out.println("\n--- Delete Student Record ---");
        System.out.print("Enter the ID of the student to delete: ");
        int id = getUserChoice();

        if (studentDAO.deleteStudent(id)) {
            System.out.println("Student with ID " + id + " deleted successfully!");
        } else {
            System.out.println("Student with ID " + id + " not found.");
        }
    }
}
